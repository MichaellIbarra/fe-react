import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Form, Button, Row, Col, Card, Spinner } from 'react-bootstrap';
import { enrollmentService, studentService } from '../../services/students';
import Header from '../../components/Header';
import Sidebar from '../../components/Sidebar';
import CustomAlert from '../common/CustomAlert';
import './AddEnrollment.css';

const AddEnrollment = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [loadingStudents, setLoadingStudents] = useState(true);
  const [loadingEnrollmentNumber, setLoadingEnrollmentNumber] = useState(true);
  const [availableStudents, setAvailableStudents] = useState([]);
  const [formData, setFormData] = useState({
    studentId: '',
    classroomId: '',
    enrollmentNumber: '',
    enrollmentDate: new Date().toISOString().split('T')[0]
  });
  const [alert, setAlert] = useState({
    show: false,
    title: '',
    message: '',
    type: 'info',
    onConfirm: null
  });

  const showAlert = (config) => {
    setAlert({ ...config, show: true });
  };

  const hideAlert = () => {
    setAlert(prev => ({ ...prev, show: false }));
  };

  const generateSequentialNumber = async () => {
    try {
      // Intentar obtener todas las matrículas para encontrar el último número
      const response = await enrollmentService.getAllEnrollments();
      const enrollments = response.data ? response.data : response;
      
      const year = new Date().getFullYear();
      const yearPrefix = `ENR-${year}-`;
      
      // Filtrar matrículas del año actual y extraer números
      const currentYearNumbers = enrollments
        .filter(enrollment => enrollment.enrollmentNumber && enrollment.enrollmentNumber.startsWith(yearPrefix))
        .map(enrollment => {
          const numberPart = enrollment.enrollmentNumber.replace(yearPrefix, '');
          return parseInt(numberPart, 10);
        })
        .filter(num => !isNaN(num));
      
      // Encontrar el siguiente número secuencial
      const nextNumber = currentYearNumbers.length > 0 
        ? Math.max(...currentYearNumbers) + 1 
        : 1;
      
      // Formatear con ceros a la izquierda (3 dígitos)
      return `${yearPrefix}${nextNumber.toString().padStart(3, '0')}`;
      
    } catch (error) {
      console.error('Error al generar número secuencial:', error);
      // Fallback más simple
      const year = new Date().getFullYear();
      return `ENR-${year}-001`;
    }
  };

  const generateEnrollmentNumber = async () => {
    try {
      // Intentar usar el endpoint del backend primero
      const response = await enrollmentService.generateEnrollmentNumber();
      return response.data ? response.data : response;
    } catch (error) {
      console.error('Error con endpoint de generación, usando método alternativo:', error);
      // Usar método alternativo basado en obtener todas las matrículas
      return await generateSequentialNumber();
    }
  };

  useEffect(() => {
    loadAvailableStudents();
    // Generar número de matrícula automáticamente al cargar el componente
    const loadEnrollmentNumber = async () => {
      try {
        setLoadingEnrollmentNumber(true);
        const autoGeneratedNumber = await generateEnrollmentNumber();
        setFormData(prev => ({
          ...prev,
          enrollmentNumber: autoGeneratedNumber
        }));
      } catch (error) {
        console.error('Error al cargar número de matrícula:', error);
      } finally {
        setLoadingEnrollmentNumber(false);
      }
    };
    loadEnrollmentNumber();
  }, []);

  const loadAvailableStudents = async () => {
    try {
      setLoadingStudents(true);
      
      // Cargar estudiantes no matriculados
      const response = await studentService.getNotEnrolledStudents();
      const studentsData = response.data ? response.data : response;
      
      setAvailableStudents(Array.isArray(studentsData) ? studentsData : []);
      
    } catch (error) {
      console.error('Error al cargar estudiantes:', error);
      showAlert({
        title: 'Error',
        message: 'Error al cargar estudiantes disponibles.',
        type: 'error',
        showCancel: false
      });
    } finally {
      setLoadingStudents(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setLoading(true);

      // Validar campos requeridos
      if (!formData.studentId) {
        throw new Error('Debe seleccionar un estudiante');
      }
      if (!formData.classroomId) {
        throw new Error('Debe ingresar el ID del aula');
      }
      if (!formData.enrollmentDate) {
        throw new Error('Debe seleccionar la fecha de matrícula');
      }

      // Usar el número de matrícula ya generado
      const enrollmentNumber = formData.enrollmentNumber;

      const enrollmentData = {
        studentId: formData.studentId,
        classroomId: formData.classroomId.trim(),
        enrollmentNumber: enrollmentNumber,
        enrollmentDate: formData.enrollmentDate
      };

      const response = await enrollmentService.createEnrollment(enrollmentData);
      const createdEnrollment = response.data ? response.data : response;
      
      showAlert({
        title: 'Éxito',
        message: 'Matrícula creada correctamente',
        type: 'success',
        showCancel: false,
        autoClose: true,
        onConfirm: () => navigate('/enrollmentlist')
      });
      
    } catch (error) {
      console.error('Error al crear matrícula:', error);
      showAlert({
        title: 'Error',
        message: error.response?.data?.message || error.message || 'Error al crear la matrícula',
        type: 'error',
        showCancel: false
      });
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCancel = () => {
    navigate('/enrollmentlist');
  };

  return (
    <>
      <Header />
      <Sidebar activeClassName="enrollment-list" />
      <div className="page-wrapper">
        <div className="content container-fluid">
          <div className="page-header">
            <div className="row align-items-center">
              <div className="col">
                <h3 className="page-title">
                  <i className="fas fa-user-plus me-2"></i>
                  Agregar Matrícula
                </h3>
              </div>
            </div>
          </div>

          <div className="row">
            <div className="col-12">
              <Card className="form-card">
                <Card.Body>
                  <Form onSubmit={handleSubmit}>
                    <Row>
                      <Col md={6}>
                        <Form.Group className="mb-3">
                          <Form.Label>
                            Estudiante <span className="text-danger">*</span>
                          </Form.Label>
                          {loadingStudents ? (
                            <div className="d-flex align-items-center">
                              <Spinner animation="border" size="sm" className="me-2" />
                              <span>Cargando estudiantes...</span>
                            </div>
                          ) : (
                            <Form.Select
                              name="studentId"
                              value={formData.studentId}
                              onChange={handleChange}
                              required
                            >
                              <option value="">Seleccione un estudiante</option>
                              {availableStudents.map(student => (
                                <option key={student.id} value={student.id}>
                                  {student.firstName} {student.lastName} - {student.documentNumber}
                                </option>
                              ))}
                            </Form.Select>
                          )}
                          <Form.Text className="text-muted">
                            Solo se muestran estudiantes sin matrícula activa
                          </Form.Text>
                        </Form.Group>
                      </Col>

                      <Col md={6}>
                        <Form.Group className="mb-3">
                          <Form.Label>
                            ID del Aula/Período <span className="text-danger">*</span>
                          </Form.Label>
                          <Form.Control
                            type="text"
                            name="classroomId"
                            value={formData.classroomId}
                            onChange={handleChange}
                            placeholder="Ej: classroom-2025-001, aula-2025-primero-a"
                            required
                          />
                          <Form.Text className="text-muted">
                            Ingrese el identificador del aula o período académico
                          </Form.Text>
                        </Form.Group>
                      </Col>
                    </Row>

                    <Row>
                      <Col md={6}>
                        <Form.Group className="mb-3">
                          <Form.Label>
                            Número de Matrícula
                          </Form.Label>
                          {loadingEnrollmentNumber ? (
                            <div className="d-flex align-items-center">
                              <Form.Control
                                type="text"
                                value="Generando..."
                                readOnly
                                disabled
                                className="bg-light"
                              />
                              <Spinner animation="border" size="sm" className="ms-2" />
                            </div>
                          ) : (
                            <div className="d-flex align-items-center">
                              <Form.Control
                                type="text"
                                name="enrollmentNumber"
                                value={formData.enrollmentNumber}
                                readOnly
                                disabled
                                className="bg-light"
                              />
                              <Button
                                variant="outline-secondary"
                                size="sm"
                                className="ms-2"
                                onClick={async () => {
                                  setLoadingEnrollmentNumber(true);
                                  try {
                                    const newNumber = await generateEnrollmentNumber();
                                    setFormData(prev => ({
                                      ...prev,
                                      enrollmentNumber: newNumber
                                    }));
                                  } catch (error) {
                                    console.error('Error al regenerar número:', error);
                                  } finally {
                                    setLoadingEnrollmentNumber(false);
                                  }
                                }}
                                disabled={loadingEnrollmentNumber}
                                title="Generar nuevo número"
                              >
                                <i className="fas fa-sync-alt"></i>
                              </Button>
                            </div>
                          )}
                          <Form.Text className="text-muted">
                            Número generado automáticamente de forma secuencial
                          </Form.Text>
                        </Form.Group>
                      </Col>

                      <Col md={6}>
                        <Form.Group className="mb-3">
                          <Form.Label>
                            Fecha de Matrícula <span className="text-danger">*</span>
                          </Form.Label>
                          <Form.Control
                            type="date"
                            name="enrollmentDate"
                            value={formData.enrollmentDate}
                            onChange={handleChange}
                            required
                          />
                        </Form.Group>
                      </Col>
                    </Row>

                    <div className="form-actions">
                      <Button 
                        type="submit" 
                        variant="primary"
                        disabled={loading}
                        className="me-3"
                      >
                        {loading ? (
                          <>
                            <Spinner animation="border" size="sm" className="me-2" />
                            Creando...
                          </>
                        ) : (
                          <>
                            <i className="fas fa-save me-2"></i>
                            Crear Matrícula
                          </>
                        )}
                      </Button>
                      
                      <Button 
                        type="button" 
                        variant="secondary"
                        onClick={handleCancel}
                        disabled={loading}
                      >
                        <i className="fas fa-times me-2"></i>
                        Cancelar
                      </Button>
                    </div>
                  </Form>
                </Card.Body>
              </Card>
            </div>
          </div>
        </div>
      </div>

      <CustomAlert
        show={alert.show}
        onClose={hideAlert}
        onConfirm={alert.onConfirm}
        title={alert.title}
        message={alert.message}
        type={alert.type}
        showCancel={alert.showCancel}
        autoClose={alert.autoClose}
      />
    </>
  );
};

export default AddEnrollment;
